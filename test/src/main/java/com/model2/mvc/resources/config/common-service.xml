<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"

		xmlns:context="http://www.springframework.org/schema/context"

		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				http://www.springframework.org/schema/beans/spring-beans.xsd

				http://www.springframework.org/schema/context 
				http://www.springframework.org/schema/context/spring-context.xsd">
							
<!-- mybatis는 sql만 관리하자, 모든 connection은 Spring에서 관리 합시다  -->


<!-- property-> properties 같지 않아? parsing ==> ${}로 접근 가능 -->
<!-- parsing을 해준다는건 그 파일의 위치를 줘야겠지? -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="location" value="classpath:com/model2/mvc/resources/sql/jdbc.properties"/>
</bean>

<!-- DB 접속 정보  -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${jdbc.driverClassName}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="initialSize" value="${jdbc.initialSize}"/>
	<property name="maxActive" value="${jdbc.maxActive}"/>
</bean>

<!-- Spring <-> mybatis 연동 정보  -->
<!-- SqlSessionFactory는 데이터베이스와의 연결을 설정, 연결 정보 제공 // Application 전체에서 단 하나만 존재 해야함.  -->
<!-- SqlSessionFactory는 DB 정보와 mybatis 연결 정보 필요 -->

<!--  SqlSession은 실질적으로 데이터베이스에 대한 작업을 수행 -->
<!-- SqlSessionTemplate은 SqlSession을 대체하는 구현체  -->

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:com/model2/mvc/resources/config/mybatis-config.xml"/>
</bean>

<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactory"/>
</bean>

<context:property-placeholder location="classpath:com/model2/mvc/resources/config/email.properties" />

   <!-- 이메일 인증 관련 빈 등록 -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
<!--       <property name="username" value="${email.account}" /> -->
<!--       <property name="password" value="${email.password}" /> -->
		<property name="username" value="ljh71506@gmail.com" /> 
		<property name="password" value="AllForone!@^" /> 
      <property name="javaMailProperties">
         <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
      </property>
      
   </bean>
   <context:component-scan base-package="com.model2.mvc.*"/>

</beans>